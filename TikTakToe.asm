.data
	displayAddress: .word 0x10008000
	
	winMusicc:	.word 60 64 67 72 67 64 60 #every number is a musical note
	tieMusic:	.word 72 71 70 69 68
	OMusic:	.word 79 84
	XMusic:	.word 76 79
	
	# a virtual twoDArray which is an array of 3x3 that will keep strack of the 
	#user's input so that we can evaluate if anyone won, at every turn
	twoDArray:	.word row1, row2, row3
	row1:		.word 0, 0, 0
	row2:		.word 0, 0, 0
	row3:		.word 0, 0, 0

	size:		.word 3
	.eqv		DATA_SIZE 4
	
	fla: .asciiz "|"
	underscor: .asciiz "_"
	.eqv  u      0x1000FAA0
	
	# Hexadecimal array of background Image (purple mountain with sun)
	BImage:	.word	0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x0047017e, 0x00340048, 0x00340048, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 0x00340048, 
0x0047017e, 0x00340048, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x00340048, 0x00340048, 0x00340048, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 0x0047017e, 
0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x0047017e, 0x0047017e, 0x0047017e, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00c19100, 0x00c19100, 0x00c19100, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00b0a400, 0x00b0a400, 0x00c19100, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00b0a400, 0x00b0a400, 0x00c19100, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 
0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00760094, 0x00760094, 0x00760094, 0x005d0084, 
0x005d0084, 0x005d0084, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x005d0084, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 
0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 
0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 
0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 
0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 
0x004b2d53, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x00760094, 0x004b2d53, 0x004b2d53, 0x00760094, 0x00760094, 
0x004b2d53, 0x004b2d53, 0x004b2d53, 0x00760094, 0x00760094, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x005a6988, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00760094, 0x00760094, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x00760094, 
0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x005a6988, 0x005a6988, 0x005a6988, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 
0x004b2d53, 0x004b2d53, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x004b2d53, 0x004b2d53, 0x004b2d53, 0x004b2d53, 
0x004b2d53, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x003a4467, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x003a4467, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x004b2d53, 0x004b2d53, 0x004b2d53, 
0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x00262a45, 0x003a4467, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x005a6988, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x003a4467, 0x004b2d53, 0x004b2d53
	
	
	# Hecadecimal array of the Image of a crown. below it we will draw X or O depending on which player won the game
	winImage:	.word	0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007173b0, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007173b0, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006d71b2, 0x000c0701, 0x006c6eb0, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007172b2, 0x00080800, 0x000c0b06, 0x006e72b1, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x003a3d5f, 0x00080a00, 0x007173af, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x00020202, 0x00f99904, 0x00211f05, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x00191a2f, 0x00f89900, 0x00f8e407, 0x006e70ab, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f74b4, 0x00998e0a, 0x00fa9801, 0x000a0a12, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006d73b2, 0x00000000, 0x006970a7, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x00000000, 0x00030106, 0x007074b3, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b3, 0x0036395a, 0x00030305, 0x006e74b1, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007171ad, 0x006a6da9, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b1, 0x00050608, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007072b2, 0x00030409, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006d71b1, 0x00141408, 0x00211f04, 0x006e72b2, 0x006f73b2, 0x006e74b2, 0x006f73b2, 0x006f73b2, 0x00010300, 0x00f6e708, 0x006e70ab, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x0038395d, 0x00f79800, 0x000b0a16, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b3, 0x00171408, 0x008c800b, 0x0040436b, 0x006e71ae, 0x00564403, 0x0044426c, 0x00464d76, 0x00837608, 0x00f6d905, 0x004e4a63, 0x006d71b2, 0x004a475a, 0x00404468, 0x007172b2, 0x00685938, 0x00f89901, 0x000b0a14, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006d71b2, 0x0018150e, 0x00f9e825, 0x00000200, 0x006e71a8, 0x00ac8702, 0x00020204, 0x001c1a2f, 0x00fbe601, 0x00f9c801, 0x00291d03, 0x007170b4, 0x00281d01, 0x00040000, 0x006f73b3, 0x0099790a, 0x00f69700, 0x000a0913, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e71b2, 0x00171611, 0x00f7e927, 0x00f8e700, 0x001d0c01, 0x00ad8801, 0x00a98801, 0x00decd12, 0x00fbe703, 0x00f9c801, 0x00f8c801, 0x00160b01, 0x00ac8800, 0x00aa8901, 0x001c0c02, 0x00f9c700, 0x00f69700, 0x000c0a16, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b2, 0x00181713, 0x00f7e928, 0x00f9e802, 0x00fddf0f, 0x00a68901, 0x00f59a05, 0x00fae704, 0x00f49d02, 0x00f89e00, 0x00f9c801, 0x00f5c501, 0x00e99e05, 0x00f39904, 0x00f7c600, 0x00f9c801, 0x00f69700, 0x000a0913, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b3, 0x001a1710, 0x00f8e925, 0x00f9e802, 0x00fee608, 0x00a88b03, 0x00f79a00, 0x00f2a902, 0x00fff0f3, 0x00b62222, 0x00f6c507, 0x00f8c700, 0x00ec9804, 0x00f99700, 0x00f9c801, 0x00f9c801, 0x00f89503, 0x000a0913, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b3, 0x0016170f, 0x00f8e925, 0x00f9e802, 0x00f9e802, 0x00fba502, 0x00f7e600, 0x00fde2cf, 0x00d41817, 0x00b22020, 0x00f49304, 0x00f9c801, 0x00fbc004, 0x00f5ca01, 0x00fbc701, 0x00f9c801, 0x00f69700, 0x000c0a16, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b2, 0x00181713, 0x00f6e926, 0x00f9e802, 0x00f9e802, 0x00f9e802, 0x00fae802, 0x00cb3e11, 0x00ce1b17, 0x00b1201d, 0x00f29605, 0x00f9c801, 0x00f9c801, 0x00f9c801, 0x00f9c801, 0x00f9c801, 0x00f69700, 0x000a0913, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e72b1, 0x00181713, 0x00fbfdb2, 0x00fefcb2, 0x00fff89e, 0x00f9e701, 0x00fae800, 0x00f9a703, 0x00b81d25, 0x00b81f22, 0x00f8c607, 0x00f9c801, 0x00fbc701, 0x00f9c801, 0x00d9af05, 0x00d9af05, 0x00fb9600, 0x000c0f1b, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x00030104, 0x00fdfca9, 0x00f9e801, 0x00f9e802, 0x00f8e725, 0x00fdf77d, 0x00fcf580, 0x00fdf684, 0x00f3a600, 0x00f3a600, 0x00e2b502, 0x00e2b502, 0x00e2b502, 0x00e2b502, 0x00f9c801, 0x00f9c801, 0x00f8c901, 0x00f39405, 0x007072ad, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007074b4, 0x00020104, 0x00fdf9af, 0x00f79800, 0x00f99700, 0x00ed9d00, 0x00f9e802, 0x00f9e802, 0x00f5cf00, 0x00f9c801, 0x00f8c802, 0x00f8c901, 0x00f9c801, 0x00f9c801, 0x00f9c801, 0x00f79a01, 0x00f89901, 0x00f79a01, 0x00f39503, 0x007072ad, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x00010206, 0x00020202, 0x00020202, 0x00260500, 0x00fb9701, 0x00f89601, 0x00f89901, 0x00fa9801, 0x00f99700, 0x00f79800, 0x00f89901, 0x00fa9801, 0x00fa9801, 0x00000201, 0x00000004, 0x00000004, 0x000d0c17, 0x006e72b1, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x007075af, 0x007373b3, 0x007373af, 0x007373af, 0x007472b3, 0x007472b3, 0x007373af, 0x007472b3, 0x007472b3, 0x007472b3, 0x006f73b3, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e74b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006e74b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 
0x007172b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2, 0x006f73b2

	# Hexadecimal Image that displays "Tie" in the middle and csome colorful ligns above and below it
	tie:	.word	0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 
	0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 
	0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 
	0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 
	0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 
	0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 
	0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 
	0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00e4d8ed, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x00ddcee8, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ebe2f2, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x00ebe2f2, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f7f4fa, 0x00c2a7d7, 0x008c58b3, 0x008c58b3, 0x008c58b3, 0x00d3c0e2, 0x00fdfcfe, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ede5f3, 0x00986abb, 0x00f2ecf6, 0x00f2ecf6, 0x00af8bca, 0x007030a0, 0x00793da6, 0x007d43a9, 0x007d43a9, 0x00fdfcfe, 0x00f5f0f8, 0x009160b6, 0x00f2ecf6, 0x00c3a9d7, 0x007030a0, 0x009e72be, 0x00e1d4eb, 0x00f2ecf6, 0x00fdfcfe, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00e4d7ed, 0x007639a4, 0x00a37ac2, 0x00f2ecf6, 0x00a77fc4, 0x00783ca5, 0x00e0d3eb, 0x00ffffff, 0x00ffffff, 
0x00f8f6fb, 0x007436a3, 0x009464b8, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00aa84c6, 0x00f1ecf6, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00e2d5ec, 0x007030a0, 0x00a881c5, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00af8bca, 0x00f5f1f9, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00e6daee, 0x007d42a8, 0x00a177c0, 0x00ede5f3, 0x00ede5f3, 0x00f9f7fb, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00b18ecb, 0x00f6f3f9, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00fefdfe, 0x00f0e9f5, 0x00bda0d3, 0x007d43a9, 0x009160b6, 0x009160b6, 0x00dbcbe7, 0x00ffffff, 0x00e3d6ec, 0x00fdfdfe, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00b08dcb, 0x00f6f2f9, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f6f3f9, 0x00a37ac2, 0x007e45aa, 0x00c5acd9, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00844dad, 0x00f8f5fb, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00ab86c8, 0x00f3edf7, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00efe8f5, 0x007030a0, 0x009a6dbc, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00d6c4e4, 0x009b6ebd, 0x00faf8fc, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ccb5dd, 0x007030a0, 0x00a57cc3, 0x00eee7f4, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00efe8f5, 0x007030a0, 0x00834cad, 0x00cfbadf, 0x00ffffff, 0x00ffffff, 0x00cab2dc, 0x008752af, 0x00d4c1e3, 0x00fefdfe, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00b594ce, 0x007030a0, 0x00d5c2e3, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00efe8f4, 0x00a176c0, 0x008f5db5, 0x007030a0, 0x008149ab, 0x009a6dbc, 0x00a176c0, 0x00efe8f4, 0x00ffffff, 0x00ffffff, 0x00faf7fb, 0x00bb9dd2, 0x007030a0, 0x00834cad, 0x00a176c0, 0x00a176c0, 0x008047ab, 0x00b899d0, 0x00f8f5fa, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00eee6f4, 0x00decfe9, 0x00f5f1f8, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f7f3f9, 0x00996cbc, 0x00c3a8d7, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00f9f7fb, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00f8f5fb, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00decfe9, 0x00f7f4fa, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00fefdfe, 0x00efe8f5, 0x00fbf9fc, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 0x00FFC9, 
0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 0x00FFE4, 
0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 0x00E4FF, 
0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 0x00C5FF, 
0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 0x0097FF, 
0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 0x9E00FF, 
0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 0xBD00FF, 
0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 0xD500FF, 
	
.text
  main:
  #draw background
  # The BImage and our display Screen are each formed by a hexadecimal array, therefore, to display the BImage on the screen, we need to 
  #load each pixel in the BImage, and store it in the same address in the display array, and every time we increment the two variables that are storing or loading by 4 
  #(4 bytes = 32 bits = 1 word)
    lw    $t0,  displayAddress
    la    $t1,  BImage
    addi  $t3,  $zero,  0
  imageLoop:
    lw    $t2,  0($t1)
    sw    $t2,  0($t0)
    addi  $t0,  $t0,  4
    addi  $t1,  $t1,  4
    addi  $t3,  $t3,  1
    bne   $t3,  1024,  imageLoop  #there is 32 pixels in the rows and 32 in the columns, so 32x32=1024
    					# and actually there is 256 pixels in the width and in the height, 
    					#but in this project we considered every 8 pixels as 1 unit of width and height

game:
	lw $t0, displayAddress
	li $t5, 0xc7B3cb
    	jal fillGrid # draw the 3 horixantal and 3 vertical ligns that create the grid of a tiktaktoe game
    	li $s3, 9 # counter of the number of turns that are possible to happen, in this case 9
 gameLoop:   
 	jal draw_twoDArray # this lign serves only in showing the backend part of the project, where we have a 2D array that sets its elements by default to 0	
 	# the number 1 is stored in the corresponding element of the array when a move is made, and the number 2 for O
 	
 	blez $s3, Tie # check if 9 turns have passed or not, if yes and there is still no winner, then there is a tie
    	
    	jal waitForKey # wait for user input
    	# we considered the numbers on the right of our laptop's keyboard as the elements of the tiktaktoe grid since they have the same stucture
    	
    	move $t1, $v0 # set the input key in t1
    	move $a0, $s3 # send the number of turns left to check turn as an argument
    	jal checkTurn
    	move $a1, $v1 # set the return value of checkTurn as an argument for the branch methods below
    	
    	# Check if the value in $t1 matches any of the numbers
    	# then branch and draw for the specific grid and check if there is a winner
    	li $t2, 0x31
    	beq $t1, $t2, handle_num7
    	li $t3, 0x32
    	beq $t1, $t3, handle_num8
    	li $t4, 0x33
    	beq $t1, $t4, handle_num9
    	li $t5, 0x34
    	beq $t1, $t5, handle_num4
    	li $t6, 0x35
    	beq $t1, $t6, handle_num5
    	li $t7, 0x36
    	beq $t1, $t7, handle_num6
    	li $s0, 0x37
    	beq $t1, $s0, handle_num1
    	li $s1, 0x38
    	beq $t1, $s1, handle_num2
    	li $s2, 0x39
    	beq $t1, $s2, handle_num3   	
	
	j gameLoop # if invalid character, just skip it and wait for another input
	
checkTurn: # use modulo to check if X turn or O turn (1 for X, 0 for O)
	addi $sp, $sp, -16 # saving used values to stack
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t3, 8($sp)
	sw $t4, 12($sp)
	
	move $t0, $a0 # sending the modulo output as a return value 
	addi $t1, $0, 2
	div $t0, $t1
	mflo $t3
	mult $t3, $t1
	mflo $t4
	sub $v1, $t0, $t4
	
	lw $t4, 12($sp)	# loading back the initial register values from the stack
	lw $t3, 8($sp)
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addi $sp, $sp, 16	
	jr $ra



handle_num1: # handling for each input value (1 means first box aka at index 0 0, so when button 7 clicks the handle 1 is called
	lw $s7, displayAddress
	
	#checking if the user is entering a key that has already been entered, if yes, then the game continues normally like the user did not enter anything, he/she is asked to enter another input again
	addi $a2, $0, 0 
	addi $a0, $0, 0
	jal InvalidMove
	
	subi $s3, $s3, 1 #counter -= 1 
	addi $a0, $zero, 656 # Set the argument value to approximately the center of the grid chosen so when we call drawX or O
	beqz $a1, drawO1      # they get drawn in the correct box, now if the turn is 0 we draw 0 otherwise we draw X since the number is
	bnez $a1, drawX1    # initially 9 and we start with X 
handle1:		
	add $a0, $zero, $a1
	add $a1, $zero, $zero # setting $a1 to the row index
	add $a2, $zero, $zero # setting $a1 to the col index
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying



handle_num2:
	lw $s7, displayAddress
	addi $a2, $0, 0
	addi $a0, $0, 1
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 572
	beqz $a1, drawO2
	bnez $a1, drawX2
handle2:	
	
	add $a0, $zero, $a1
	add $a1, $zero, $zero
	addi $a2, $zero, 1
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying

handle_num3:
	lw $s7, displayAddress
	addi $a2, $0, 0
	addi $a0, $0, 2
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 616
	beqz $a1, drawO3
	bnez $a1, drawX3
	
handle3:	
	add $a0, $zero, $a1
	add $a1, $zero, $zero
	addi $a2, $zero, 2
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying

handle_num4:
	lw $s7, displayAddress
	addi $a2, $0, 1
	addi $a0, $0, 0
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 1936
	beqz $a1, drawO4
	bnez $a1, drawX4
handle4:	
	
	add $a0, $zero, $a1
	addi $a1, $zero, 1
	add $a2, $zero, $zero
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying

handle_num5:
	lw $s7, displayAddress
	addi $a2, $0, 1
	addi $a0, $0, 1
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 1980
	beqz $a1, drawO5
	bnez $a1, drawX5

handle5:
	add $a0, $zero, $a1
	addi $a1, $zero, 1
	addi $a2, $zero, 1
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying

handle_num6:
	lw $s7, displayAddress
	addi $a2, $0, 1
	addi $a0, $0, 2
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 2024
	beqz $a1, drawO6
	bnez $a1, drawX6
handle6:	
	
	add $a0, $zero, $a1
	addi $a1, $zero, 1
	addi $a2, $zero, 2
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying

handle_num7:
	lw $s7, displayAddress
	addi $a2, $0, 2
	addi $a0, $0, 0
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 3344
	beqz $a1, drawO7
	bnez $a1, drawX7
	
handle7:	
	add $a0, $zero, $a1
	addi $a1, $zero, 2
	add $a2, $zero, $zero
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying
	
handle_num8:
	lw $s7, displayAddress
	addi $a2, $0, 2
	addi $a0, $0, 1
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 3388
	beqz $a1, drawO8
	bnez $a1, drawX8
handle8:	
	
	add $a0, $zero, $a1
	addi $a1, $zero, 2
	addi $a2, $zero, 1
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying
	
	
handle_num9:
	lw $s7, displayAddress
	addi $a2, $0, 2
	addi $a0, $0, 2
	jal InvalidMove
	subi $s3, $s3, 1
	addi $a0, $0, 3432
	beqz $a1, drawO9
	bnez $a1, drawX9

handle9:
	add $a0, $zero, $a1
	addi $a1, $zero, 2
	addi $a2, $zero, 2
	bnez $a0, XisPlaying
	beqz $a0, OisPlaying
	
XisPlaying:
	#here in this funtion, we are passing the row and column number as parameters, and therefore, this function behaves differently depending what is the handle function that called it
	addi $sp, $sp, -24 # here we are pushing all the arguments in the stack so that when we change 
	 			#their values here, they won't change in the calling method
	sw $ra, 0($sp)
	sw $t2, 4($sp)
	sw $t1, 8($sp)
	sw $a2, 12($sp)
	sw $a1, 16($sp)
	sw $a0, 20($sp)

	la $t0, twoDArray #storing the address of the 2DArray in $t0
	sll $t1, $a1, 2	 # shift left $t1 by 2
	add $t1, $t1, $t0 #adding the row address
	lw $t2, 0($t1) # now in $t2 we have the address of the row

	#here we are doing the same thing for the second argument which is the column number
	sll $t1, $a2, 2	
	add $s0, $t1, $t2
	addi $t3, $zero, 1 #here we are setting the 2DArray[a0][a1] to 1 since we assigned it as the number of the player X in the 2DArray
	sw $t3, 0($s0)

	# to check for the winner, we will call the method win, but we need to arragne the parameters correctly, so we are moving them to their right place
	move $a0, $a1
	move $a1, $a2
	jal win

	lw $ra, 0($sp)
	lw $t2, 4($sp)
	lw $t1, 8($sp)
	lw $a2, 12($sp)
	lw $a1, 16($sp)
	lw $a0, 20($sp)
	addi $sp, $sp, 16

	addi $t0, $zero, 0 # here we have two musical notes in the array, so in order to play them, we will need to go to the array at index 0 and 4
	#here we are also considering $t0 as a counter to know when the array of musical notes is is completely played

playXMusic:
	bgt $t0, 4, gameLoop
	li $v0, 31 # audio
	lw $a0, XMusic($t0)
	li $a1, 300 # the delay of the sound in milliseconds
	li $a2, 13 # instrument number
	li $a3, 70
	syscall
	addi $t0, $t0, 4 # incrementing the index of the array of noted so that we go to the next one
	j playXMusic
	addi $t0, $zero, 0


OisPlaying:
		#here in this funtion, we are passing the row and column number as parameters, and therefore, this function behaves differently 
			#depending what is the handle function that called it
	addi $sp, $sp, -24 # here we are pushing all the arguments in the stack so that when we change 
	 			#their values here, they won't change in the other mthods
	sw $ra, 0($sp)
	sw $t2, 4($sp)
	sw $t1, 8($sp)
	sw $a2, 12($sp)
	sw $a1, 16($sp)
	sw $a0, 20($sp)


	la $t0, twoDArray #storing the address of the 2DArray in $t0
	sll $t1, $a1, 2	 # shift left $t1 by 2
	add $t1, $t1, $t0  #adding the row address
	lw $t2, 0($t1)	 # now in $t2 we have the address of the row

	#here we are doing the same thing for the second argument which is the column number
	sll $t1, $a2, 2	
	add $s0, $t1, $t2
	
	addi $t3, $zero, 2 #here we are setting the 2DArray[a0][a1] to 2 since we assigned it as the number of the player O in the 2DArray
	sw $t3, 0($s0)

	# to check for the winner, we will call the methid win, but we need to arragne the parameters correctly, so we are moving them to their right place
	move $a0, $a1
	move $a1, $a2
	jal win
	
	lw $ra, 0($sp)
	lw $t2, 4($sp)
	lw $t1, 8($sp)
	lw $a2, 12($sp)
	lw $a1, 16($sp)
	lw $a0, 20($sp)
	addi $sp, $sp, 16

	addi $t0, $zero, 0
playOMusic:
	bgt $t0, 4, gameLoop
	li $v0, 31
	lw $a0, OMusic($t0)
	li $a1, 300
	li $a2, 13
	li $a3, 70
	syscall
	addi $t0, $t0, 4
	j playOMusic
	addi $t0, $zero, 0

#just used in backend for the 2D array
underscore:
	addi $sp, $sp, -12
	sw $a0, 0($sp)
	sw $v0, 4($sp)
	sw $ra, 8($sp)
	
	la $a0, underscor
 	li $v0, 4
	syscall
	
	lw $ra, 8($sp)
	lw $v0, 4($sp)
	lw $a0, 0($sp)
	addi $sp, $sp, 12
	
	jr $ra
	
#just used in backend for the 2D array
flag:
	addi $sp, $sp, -12
	sw $a0, 0($sp)
	sw $v0, 4($sp)
	sw $ra, 8($sp)
	
	la $a0, fla
 	li $v0, 4
	syscall
	
	lw $ra, 8($sp)
	lw $v0, 4($sp)
	lw $a0, 0($sp)
	addi $sp, $sp, 12
	
	jr $ra

# to know if there is a winner now, we need to check all the rows, columns, and the 2 diagonals
# if the values of the 3 elements that we are checking are not zeros and have the same number (1 for X | 2 for O) there the numbers shows us who is the winner
win:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	jal checkTheHorizontalLine0
	jal checkTheHorizontalLine1
	jal checkTheHorizontalLine2
	jal checkTheVerticalLine0
	jal checkTheVerticalLine1
	jal checkTheVerticalLine2
	jal checkTheDiagonal0
	jal checkTheDiagonal1


	add $v0, $zero, $zero	# if the code comes back to here and reads this line, that means that none 
				#of the functions called above resulted in finding a winner, which will call 
				#the method that displays the winner and end up calling Exit, and finishing the game. Therefore we should 
				#continue the game and go to the next player
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra	
checkTheHorizontalLine0:
	la $t2, twoDArray
	lw $t1, 0($t2)			# we are storing the memory location of the 2D array in $t2
					# by default, since we are in the beginning of the array, therefore we directly accessed the first row at index 0 (therefore 0($t2))
	
	# now in $t1, which is the row 0, we will loop over its 3 element, by using 0, 4, and 8 and adding them to $t2
	lw $t3, 0($t1)		
	lw $t4, 4($t1)
	lw $t5, 8($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawLine0

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program
	jr $ra

						
checkTheHorizontalLine1:
	la $t2, twoDArray 
	lw $t1, 4($t2)		# we are storing the memory location of the 2D array in $t2
				# when we add base plus offst with 4, 4 bytes is 32 bits, so we are actually 
				#jumping by 1 location in the 2D array, so we are accessing the second row at index 1
				
	# now in $t1, which is the row 1, we will loop over its 3 element, by using 0, 4, and 8 and adding them to $t2
	lw $t3, 0($t1)
	lw $t4, 4($t1)
	lw $t5, 8($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	#move $a0, $t5
	bne $t6, $zero, drawLine1


	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program
	jr $ra
	
	
checkTheHorizontalLine2:
	la $t2, twoDArray
	lw $t1, 8($t2) # we are storing the memory location of the 2D array in $t2
				# when we add base plus offst with 8, 8 bytes is 2 times the 32 bits, so we are actually 
				#jumping by 2 location in the 2D array, so we are accessing the third row at index 2
			
	# now in $t1, which is the row 2, we will loop over its 3 element, by using 0, 4, and 8 and adding them to $t2	
	lw $t3, 0($t1)
	lw $t4, 4($t1)	
	lw $t5, 8($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawLine2

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program	

	jr $ra

checkTheVerticalLine0:
	la $t2, twoDArray
	#here we are accessing the twoDArray[0][0]
	lw $t1, 0($t2)
	lw $t3, 0($t1)

	#here we are accessing the twoDArray[1][0]
	lw $t1, 4($t2)
	lw $t4, 0($t1)

	#here we are accessing the twoDArray[2][0]
	lw $t1, 8($t2)
	lw $t5, 0($t1)

	# we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t3, $t4
	and $t6, $t6, $t5
	bne $t6, $zero, drawCol0

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program
	jr $ra
checkTheVerticalLine1:
	la $t2, twoDArray
	#here we are accessing the twoDArray[0][1]
	lw $t1, 0($t2)
	lw $t3, 4($t1)

	#here we are accessing the twoDArray[1][1]
	lw $t1, 4($t2)
	lw $t4, 4($t1)

	#here we are accessing the twoDArray[2][1]
	lw $t1, 8($t2)
	lw $t5, 4($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawCol1

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program

	jr $ra

checkTheVerticalLine2:
	la $t2, twoDArray
	#here we are accessing the twoDArray[0][2]
	lw $t1, 0($t2)
	lw $t3, 8($t1)

	#here we are accessing the twoDArray[1][2]
	lw $t1, 4($t2)	
	lw $t4, 8($t1)

	#here we are accessing the twoDArray[2][2]
	lw $t1, 8($t2)
	lw $t5, 8($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawCol2
	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program

	jr $ra

checkTheDiagonal0:


	la $t2, twoDArray		# t2 = twoDArray
	
	#here we are accessing the twoDArray[0][0]
	lw $t1, 0($t2)
	lw $t3, 0($t1)

	#here we are accessing the twoDArray[1][1]
	lw $t1, 4($t2)
	lw $t4, 4($t1)

	#here we are accessing the twoDArray[2][2]
	lw $t1, 8($t2)
	lw $t5, 8($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawDiag0

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program
	jr $ra

checkTheDiagonal1:
	la $t2, twoDArray
		#here we are accessing the twoDArray[0][2]
	lw $t1, 0($t2)
	lw $t3, 8($t1)

	#here we are accessing the twoDArray[1][1]
	lw $t1, 4($t2)
	lw $t4, 4($t1)

	#here we are accessing the twoDArray[2][0]
	lw $t1, 8($t2)
	lw $t5, 0($t1)

	and $t6, $t3, $t4 # we are anding (AND) all the 3 consecutive blocks, so if they are the same we will have 1 or 2, which menas that there is a winner
	and $t6, $t6, $t5
	bne $t6, $zero, drawDiag1

	addi $v0, $zero, 0 # here we are returning 0 since in the previously called function (returningThatThereIsAWinner), the method did not exit the program
	jr $ra

returningThatThereIsAWinner:
    li    $t0,  0x10008000
    la    $t1,  winImage
    addi  $t3,  $zero,  0
  imageWinLoop: # displaying the crown image
    lw    $t2,  0($t1)
    sw    $t2,  0($t0)
    addi  $t0,  $t0,  4
    addi  $t1,  $t1,  4
    addi  $t3,  $t3,  1
    bne   $t3,  1024,  imageWinLoop  #there is 32 pixels in the rows and 32 in the columns, so 32x32=1024 
    addi $t1, $t1, 1
    
	lw $t1, displayAddress
	# small edits of the color of some pixels, to enhance the resolution of the image
	li $t8, 0
	sw $t8, 324($t1)
	sw $t8, 340($t1)
	sw $t8, 1072($t1)
	sw $t8, 952($t1)
	sw $t8, 964($t1)
	sw $t8, 836($t1)
	li $t8, 0x006f73b2
	sw $t8, 944($t1)
	li $t8, 0xD7C401
	sw $t8, 1080($t1)

	
	addi $t0, $zero, 0
soundWin:
	bgt $t0, 24, part2
	li $v0, 31
	lw $a0, winMusicc($t0)
	li $a1, 400
	li $a2, 20
	li $a3, 70
	syscall
	
	li $v0, 32
	li $a0, 210
	
	syscall
	addi $t0, $t0, 4
	j soundWin

part2:	
	#check who won to draw O or X, if $t5 is equal to 1, then X won, if not, then it is equal to 2, so O won, therefore we won't branch and the code after the jal will be executed, displaying the O
	addi $t0, $zero, 1
	beq $t5, $t0, XWinDraw

OWinDraw:
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	li $t2, 0xFFD100
	li $t8, 0
	sw $t8, 324($t1)
	sw $t8, 340($t1)
	sw $t8, 1072($t1)
	sw $t8, 952($t1)
	sw $t8, 964($t1)
	sw $t8, 836($t1)
	li $t8, 0x006f73b2
	sw $t8, 944($t1)
	li $t8, 0xD7C401
	sw $t8, 1080($t1)

	addi $t1, $t1, 2636
	sw $t8, 132($t1)

	addi $s0, $zero, 7
	
OLoop1:
	# right vertical lign with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	li $t8, 0
	sw $t2, 0($t1)
	sw $t8, 4($t1)
	addi $t1, $t1, 128
	addi $s0, $s0, -1
	bnez $s0, OLoop1
	sw $t8, 0($t1)
	addi $s0, $zero, 5
	addi $t1, $t1, -4
OLoop2:
	# bottom horizontal lign with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	sw $t2, 0($t1)
	sw $t8, 128($t1)
	addi $t1, $t1, -4
	addi $s0, $s0, -1
	bnez $s0, OLoop2
	sw $t8, 0($t1)
	addi $t1, $t1, -128
	addi $s0, $zero, 7
OLoop3:
	# left vertical lign with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	sw $t2, 0($t1)
	sw $t8, -4($t1)
	addi $t1, $t1, -128
	addi $s0, $s0, -1
	bnez $s0, OLoop3
	sw $t8, 0($t1)
	addi $s0, $zero, 5
	addi $t1, $t1, 4
OLoop4:
	# top horizontal lign with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	sw $t2, 0($t1)
	sw $t8, -128($t1)
	addi $t1, $t1, 4
	addi $s0, $s0, -1
	bnez $s0, OLoop4
	sw $t8, 0($t1)
	sw $t2, 124($t1)
	sw $t2, 892($t1)
	sw $t2, 108($t1)
	sw $t2, 876($t1)
	j Exit 
	
XWinDraw:
	lw $t1, displayAddress
	li $t6, 0xFFD700
	li $t7, 0
	li $t8, 0xFFD580
	addi $t1, $t1, 2748
	subi $t1, $t1, 404
	
	addi $t0, $0, 9
	
firstDiagWin: # with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	sw $t7, 0($t1)
	sw $t6, 4($t1)
	sw $t8, 8($t1)
	sw $t6, 12($t1)
	sw $t7, 16($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiagWin
	sw $t7, 0($t1)
	sw $t7, 4($t1)
	sw $t7, 8($t1)
	sw $t7, 12($t1)
	sw $t7, 16($t1)
	sw $t7, -4($t1)
	sw $t7, -8($t1)
	addi $t0, $0, 9
	subi $t1, $t1 1140
secondDiagWin: # with 3D effect
	li $v0, 32
	li $a0, 50
	syscall
	
	sw $t7, 0($t1)
	sw $t6, -4($t1)
	sw $t8, -8($t1)
	sw $t6, -12($t1)
	sw $t7, -16($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiagWin

	sw $t7, 0($t1)
	sw $t7, 4($t1)
	sw $t7, 8($t1)
	sw $t7, -4($t1)
	sw $t7, -8($t1)
	sw $t7, -12($t1)
	sw $t7, -16($t1)
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	
	
	
	  addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
    j Exit

	
fillGrid: # method to fill the grid
    # Save registers to the stack
    addi $sp, $sp, -24   # Allocate space on the stack
    sw $ra, 20($sp)      # Save return address
    sw $t0, 16($sp)
    sw $t2, 12($sp)
    sw $t3, 8($sp)
    sw $t7, 4($sp)
    
    move $t3, $zero
    addi $t0, $t0, 1280
    jal fillRows # calls method to fill the rows
    move $t2, $zero
    li $t2, 0
    jal fillColumns  # calls method to fill the columns

    # Restore registers from the stack
    lw $t7, 4($sp)
    lw $t3, 8($sp)
    lw $t2, 12($sp)
    lw $t0, 16($sp)
    lw $ra, 20($sp)
    addi $sp, $sp, 24
    jr $ra


waitForKey: # method to wait for the user Input
    lw $t0, 0xffff0000        # Load Receiver Control register into $t0
    andi $t0, $t0, 0x1        # Isolate Ready bit (bit 0)
    beq $t0, $zero, waitForKey # If Ready bit is 0, keep waiting

    lw $v0, 0xffff0004        # Load Receiver Data register into $v0 (new keystroke)
    jr $ra
	
fillRows: # method to fill the grid rows
    # Save registers to the stack
    addi $sp, $sp, -20
    sw $ra, 0($sp)
    sw $t0, 4($sp)
    sw $t3, 8($sp)
    sw $t5, 12($sp)
    sw $t6, 16($sp)
firstRow:
    li $v0, 32 # to create animation in the project, we use this syscall that stops reading the code for $a0 millisconds (here 10 ms)
    li $a0, 10
    syscall

	# the loop keep sepeating 32 times because the number of pixels in every row and column is 32
    sw $t5, 0($t0)
    addiu $t0, $t0, 4 # every time we are going to the next pixel, we are incrementing the address by 4 bytes
    addiu $t3, $t3, 1
    li $t6, 32
    blt $t3, $t6, firstRow
    move $t3, $zero
    addi $t0, $t0, 1280
secondRowLoop:
    li $v0, 32
    li $a0, 10
    syscall
    
    sw $t5, 0($t0)
    addiu $t0, $t0, 4
    addiu $t3, $t3, 1
    blt $t3, $t6, secondRowLoop

    # Restore registers from the stack
    lw $t6, 16($sp)
    lw $t5, 12($sp)
    lw $t3, 8($sp)
    lw $t0, 4($sp)
    lw $ra, 0($sp)
    addi $sp, $sp, 20

    jr $ra

fillColumns: # method to fill the columns
    # Save registers to the stack
    lw $t0, displayAddress
    addiu $sp, $sp, -24
    sw $ra, 20($sp)
    sw $t0, 16($sp)
    sw $t3, 12($sp)
    sw $t5, 8($sp)
    sw $t6, 4($sp)

    # First horizontal line
    addi $t0, $t0, 40
    move $t3, $zero
    addi $t6, $zero, 32 # counter = 3 because we have 32 pixels on each lign  
firstCol:
    li $v0, 32
    li $a0, 10
    syscall
    
	sw $t5, 0($t0)
	addi $t3, $t3, 1
	addi $t0, $t0, 128
	blt $t3, $t6, firstCol
	lw $t0, displayAddress
	addi $t0, $t0, 80
	move $t3, $zero
secondCol:
    li $v0, 32
    li $a0, 10
    syscall
    
	sw $t5, 0($t0)
	addi $t3, $t3, 1
	addi $t0, $t0, 128
	blt $t3, $t6, secondCol
	


    # Restore registers from the stack
    lw $t6, 4($sp)
    lw $t5, 8($sp)
    lw $t3, 12($sp)
    lw $t0, 16($sp)
    lw $ra, 20($sp)
    addiu $sp, $sp, 24
    jr $ra

draw_twoDArray:
	addi $sp, $sp, -20 #pushing them to the stack so that when we change their values, their values in other methods won't be affected
	sw $ra, 0($sp)
	sw $a0, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t0, 16, ($sp)
	
	
	
	addi $t1, $zero, 0
	la $t2, twoDArray #storing the address of the twoDArray in $t2
	# printing the element at index 00
	lw $t1, 0($t2)
	lw $t3, 0($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 01
	lw $t3, 4($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 02
	lw $t3, 8($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 10
	lw $t1, 4($t2)
	lw $t3, 0($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 11
	lw $t1, 4($t2)
	lw $t3, 4($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 12
	lw $t1, 4($t2)
	lw $t3, 8($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 20
	lw $t1, 8($t2)
	lw $t3, 0($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 21
	lw $t3, 4($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	# printing the element at index 22
	lw $t3, 8($t1)
	move $a0, $t3
	li $v0, 1
	syscall
	la $a0, fla
 	 li $v0, 4
	 syscall
	 
	lw $ra, 0($sp)
	lw $a0, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t0, 16, ($sp)
	addi $sp, $sp, 20 #popping them out of the stack
	jr $ra

drawX1: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 396
	
	addi $t0, $0, 6
	
firstDiag1:
    li $v0, 32
    li $a0, 15 # delay for animation (ms)
    syscall
    
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132 # = 128 + 4 --> 128 = 32 * 4 = 1 lign ; + 4 because the lign is diagonal, therefore every time we step one lign below nad one lign right
	bnez $t0 firstDiag1

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag1:
    li $v0, 32
    li $a0, 15 # delay for animation (ms)
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124 # = 128 - 4 --> 128 = 32 * 4 = 1 lign ; - 4 because the lign is second diagonal, therefore every time we step one lign below nad one lign left
	bnez $t0 secondDiag1
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle1
	
	
drawX2: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)

	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268

	addi $t0, $0, 6
	
firstDiag2:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag2

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag2:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag2
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle2
	
	
drawX3: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)	
	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag3:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag3

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag3:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag3
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle3
	
	
drawX4: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)

	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag4:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag4

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag4:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag4
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle4
	
	
drawX5: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag5:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag5

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag5:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag5
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle5
	
	
drawX6: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag6:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag6

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag6:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag6
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle6
	
	
drawX7: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)

	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag7:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag7

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag7:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag7
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle7
	
	
drawX8: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)

	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag8:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag8

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag8:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag8
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle8
	
	
drawX9: # method to draw the X shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)

	lw $t1, displayAddress
	li $t8, 0xffffff
	add $t1, $a0, $t1
	subi $t1, $t1, 268
	
	addi $t0, $0, 6
	
firstDiag9:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, 4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 132
	bnez $t0 firstDiag9

	addi $t0, $0, 6
	subi $t1, $t1 768
secondDiag9:
    li $v0, 32
    li $a0, 15
    syscall
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	subi $t0, $t0, 1
	addi $t1, $t1, 124
	bnez $t0 secondDiag9
	
	lw $t8, 12($sp)
	lw $t0, 8($sp)
	lw $t2, 4($sp)
	lw $t1, 0($sp)
	addi $sp, $sp, 16
	j handle9
	
drawO1: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 380
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle1
	

drawO2: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle2
	

drawO3: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle3
	

drawO4: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle4
	

drawO5: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle5
	

drawO6: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle6
	

drawO7: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle7
	

drawO8: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle8
	

drawO9: # method to draw the O shape
	addi $sp, $sp, -16
	sw $t1, 0($sp)
	sw $t2, 4($sp)
	sw $t0, 8($sp)
	sw $t8, 12($sp)
	
	lw $t1, displayAddress
	li $t8, 0xFFF9A2
	add $t1, $a0, $t1
	subi $t1, $t1, 252
	sw $t8, 0($t1)
	sw $t8, -4($t1)
	sw $t8, -8($t1)
	sw $t8, 116($t1)
	sw $t8, 244($t1)
	sw $t8, 372($t1)
	sw $t8, 500($t1)
	sw $t8, 632($t1)
	sw $t8, 636($t1)
	sw $t8, 640($t1)
	sw $t8, 516($t1)
	sw $t8, 388($t1)
	sw $t8, 260($t1)
	sw $t8, 132($t1)
	
	j handle9
	
Tie:
	addi $t0, $zero, 0
soundTie:
	bgt $t0, 16, Tie2
	li $v0, 31 #audio
	lw $a0, tieMusic($t0)
	li $a1, 800 #duration of the note in milliseconds
	li $a2, 24 #istrument number
	li $a3, 70
	syscall
	
	li $v0, 32
	li $a0, 210
	
	syscall
	addi $t0, $t0, 4
	j soundTie
Tie2:
# display the image of the tie
    li    $t0,  0x10008000
    la    $t1,  tie
    addi  $t3,  $zero,  0
  TieImageLoop:
    li $v0, 32
    li $a0, 2
    syscall
    lw    $t2,  0($t1)
    sw    $t2,  0($t0)
    addi  $t0,  $t0,  4
    addi  $t1,  $t1,  4
    addi  $t3,  $t3,  1
    bne   $t3,  1024,  TieImageLoop 
    j Exit

# here is the code that draws the 8 possible lign when someone wins, so for example if one of the players fills all the row0, then a lign covering the middle of the row0
drawLine0:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF # purple color
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 644
L0:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 4
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, L0
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawLine1:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 2052
L1:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 4
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, L1
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawLine2:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 3460
L2:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 4
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, L2
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawCol0:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 144
C0:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 128
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, C0
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawCol1:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 188
C1:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 128
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, C1
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawCol2:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 232
C2:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 128
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, C2
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawDiag1:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 248
D1:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 124
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, D1
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	

drawDiag0:
	addi $sp, $sp, -12
	sw $t8, 0($sp)
	sw $t1, 8($sp)
	sw $s0, 4($sp)
	li $t8, 0xEC8CFF
	addi $s0, $0, 30
	lw $t1, displayAddress
	addi $t1, $t1, 132
D0:
	sw $t8, 0($t1)
	subi $s0,$s0, 1
	addi $t1, $t1, 132
	    li $v0, 32
    	    li $a0, 15
    	    syscall
	bnez $s0, D0
	
	lw $s0, 8($sp)
	lw $t1, 4($sp)
	lw $t8, 0($sp)
	addi $sp $sp, 12
	
	li $v0, 32
    	li $a0, 1000
        syscall
	j returningThatThereIsAWinner	
	
	
InvalidMove:
	addi $sp, $sp, -20
	sw $a2, 16($sp)
	sw $a0, 12($sp)
	sw $t3, 8($sp)
	sw $t1, 4($sp)
	sw $t2, 0($sp)

	la $t2, twoDArray
	#here we are accessing the twoDArray[a0][a1]
	sll $a2, $a2, 2
	add $t2, $t2, $a2
	lw $t1, 0($t2)
	sll $a0, $a0, 2
	add $t1, $t1, $a0
	lw $t3, 0($t1)
	bne $t3, $0, gameLoopAfterInvalid
	
	lw $t2, 0($sp) 
	lw $t1, 4($sp)
	lw $t3, 8($sp)
	lw $a0, 12($sp)
	lw $a2, 16($sp)
	addi $sp, $sp, 20
	jr $ra

gameLoopAfterInvalid:
	lw $t2, 0($sp) 
	lw $t1, 4($sp)
	lw $t3, 8($sp)
	lw $a0, 12($sp)
	lw $a2, 16($sp)
	addi $sp, $sp, 20
	
	j gameLoop
	
			

Exit: 
	li $v0, 10
	syscall
